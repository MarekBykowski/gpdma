From 742982d3e98f1a89c768d766a6e48af0ec86ec2a Mon Sep 17 00:00:00 2001
From: Marek Bykowski <marek.bykowski@gmail.com>
Date: Wed, 21 Feb 2018 08:28:40 -0600
Subject: [PATCH 2/2] netboot traces: Adding the trace calls for user and
 kernel space.

ncpWrite|ncpRead|ncpModify|ncpFill|ncpUsleep|ncpPoll|ncpComment|but not ncpReset

These are user space (they don't call any subsequent function elsewhere):
- ncp{Usleep,Comment}: rte/api/common/ncp.c
- ncpPoll: rte/api/common/ncp_utils_io.c
  - ncpPoll calls ncp_dev_read32/write32 which may be in kernel (we
    don't care)

These seem kernel space:
- ncp{Write,Read,Modify,Fill}: rte/api/ncp/ncp_dev.c

eg. take read8. At the end of the calling chain is
ncp_dev_block_read8(),where we put the trace call (we cover both
user and kernel space but all seem kernel space):
ncp_read8()(rte/api/common/ncp.c)->
   ncp_dev_read8()(rte/api/ncp/ncp_dev.c)->
      ncp_dev_block_read8()(rte/api/ncp/ncp_dev.c)

Initially we put traces to nca directory (rte/api/nca/ncp_dev.c) but
this doesn't seem compiled in.
---
 rte/api/common/ncp.c              | 115 ++++++++++---
 rte/api/common/ncp_utils_io.c     |  34 ++++
 rte/api/common/netboot-tp.h       | 245 ++++++++++++++++++++++++++
 rte/api/common/netboot-trace.h    | 350 ++++++++++++++++++++++++++++++++++++++
 rte/api/ncav3/task/ncp_task_pvt.h |  37 +---
 rte/api/ncp/ncp_dev.c             | 320 +++++++++++++++++++++++++++++++---
 rte/api/ncp/netboot-tp.h          | 245 ++++++++++++++++++++++++++
 rte/api/ncp/netboot-trace.h       | 350 ++++++++++++++++++++++++++++++++++++++
 8 files changed, 1620 insertions(+), 76 deletions(-)
 create mode 100644 rte/api/common/netboot-tp.h
 create mode 100644 rte/api/common/netboot-trace.h
 create mode 100644 rte/api/ncp/netboot-tp.h
 create mode 100644 rte/api/ncp/netboot-trace.h

diff --git a/rte/api/common/ncp.c b/rte/api/common/ncp.c
index 0fe1bda..61b6680 100644
--- a/rte/api/common/ncp.c
+++ b/rte/api/common/ncp.c
@@ -2,21 +2,21 @@
  ** INTEL CONFIDENTIAL
  ** Copyright 2008 - 2015 Intel Corporation All Rights Reserved.
  **
- ** The source code contained or described herein and all documents related to 
- ** the source code ("Material") are owned by Intel Corporation or its 
- ** suppliers or licensors. Title to the Material remains with 
- ** Intel Corporation or its suppliers and licensors. 
+ ** The source code contained or described herein and all documents related to
+ ** the source code ("Material") are owned by Intel Corporation or its
+ ** suppliers or licensors. Title to the Material remains with
+ ** Intel Corporation or its suppliers and licensors.
  ** The Material contains trade secrets and proprietary and confidential
- ** information of Intel or its suppliers and licensors. The Material is 
- ** protected by worldwide copyright and trade secret laws and treaty 
- ** provisions. No part of the Material may be used, copied, reproduced, 
- ** modified, published, uploaded, posted, transmitted, distributed, or 
+ ** information of Intel or its suppliers and licensors. The Material is
+ ** protected by worldwide copyright and trade secret laws and treaty
+ ** provisions. No part of the Material may be used, copied, reproduced,
+ ** modified, published, uploaded, posted, transmitted, distributed, or
  ** disclosed in any way without Intel's prior express written permission.
  **
- ** No license under any patent, copyright, trade secret or other 
- ** intellectual property right is granted to or conferred upon you by 
- ** disclosure or delivery of the Materials, either expressly, by implication, 
- ** inducement, estoppel or otherwise. Any license under such intellectual 
+ ** No license under any patent, copyright, trade secret or other
+ ** intellectual property right is granted to or conferred upon you by
+ ** disclosure or delivery of the Materials, either expressly, by implication,
+ ** inducement, estoppel or otherwise. Any license under such intellectual
  ** property rights must be express and approved by Intel in writing.
  *************************************************************************/
 
@@ -28,6 +28,16 @@
 
 #include "ncp_release_id.h"
 
+#if defined(NCP_KERNEL)
+//#define CREATE_TRACE_POINTS -> this is to be in defined only once
+#define TRACE_HEADER_MULTI_READ
+#include "netboot-trace.h"
+#else
+#define TRACEPOINT_DEFINE
+#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#include "netboot-tp.h"
+#endif
+
 /* --- Exportable State Data --- */
 ncp_hdl_t **ncp_hdls = NULL;
 ncp_dev_hdl_t ncp_dev_hdls[NCP_MAX_DEVS] =
@@ -47,7 +57,7 @@ ncp_uint8_t ncp_dev_hdl_users[NCP_MAX_DEVS] = {0};
 void *ncpHwioTraceFuncArg = NULL;
 ncp_hwio_trace_func_t ncpHwioTraceFunc = NULL;
 
-ncp_uint32_t sc_nodes[NCP_SYSCACHE_NUM_NODES] = 
+ncp_uint32_t sc_nodes[NCP_SYSCACHE_NUM_NODES] =
                     {0x20, 0x1e, 0x21, 0x1d, 0x11, 0x12, 0x10, 0x13};
 ncp_uint32_t sm_nodes[NCP_EXTMEM_NUM_NODES] = {0x22, 0x0f, 0x08, 0x09};
 
@@ -61,7 +71,7 @@ ncp_bool_t ncp_dev_initialized = FALSE;
  *   Re-initialize the ncp_hdls pointer and NVM allocator.
  *   Note that this will wipe out EVERYTHING stored in NVM.
  */
-ncp_st_t 
+ncp_st_t
 ncp_cold_start(void)
 {
     ncp_st_t ncpStatus = NCP_ST_SUCCESS;
@@ -138,7 +148,21 @@ ncp_comment(
     }
 #endif
 
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_comment(
+		NCP_HWIO_COMMENT,
+		msg
+		);
+#else
+    tracepoint(kubus,
+		netboot_comment,
+		NCP_HWIO_COMMENT,
+		msg
+		);
+#endif
+
     if ((ncpHwioTraceFunc != NULL) && (msg != NULL)) {
+
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
                 NCP_HWIO_COMMENT,
@@ -147,9 +171,9 @@ ncp_comment(
     }
 }
 
-int 
+int
 ncp_sim_usleep(
-    ncp_hdl_t ncpHdl, 
+    ncp_hdl_t ncpHdl,
     unsigned long usecs)
 {
 
@@ -196,7 +220,7 @@ ncp_sim_usleep(
             break;
         }
 
-        ts_delta = temp_ts - start_ts; 
+        ts_delta = temp_ts - start_ts;
         scale = (sleep_ticks / ts_delta);
         if (scale == 0) scale = 1;
         if (scale > 1000) scale = 1000;
@@ -204,7 +228,7 @@ ncp_sim_usleep(
         ticks_left -= ts_delta;
         sleep_ticks = ticks_left * scale;
 
-        ncp_sys_usleep(sleep_ticks / 256); 
+        ncp_sys_usleep(sleep_ticks / 256);
 
         start_ts = temp_ts;
 
@@ -233,6 +257,21 @@ ncp_usleep(
               );
 #endif
 
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_generic(
+		NCP_HWIO_USLEEP,
+		0,
+		usecs
+		);
+#else
+    tracepoint(kubus,
+		netboot_generic,
+		NCP_HWIO_USLEEP,
+		0,
+		usecs
+		);
+#endif
+
     if (ncpHwioTraceFunc != NULL) {
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
@@ -1904,7 +1943,7 @@ ncp_mdio_write(
         rw.count = count;
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
-                0, 
+                0,
                 devNum,
                 &rw);
     }
@@ -1938,9 +1977,9 @@ ncp_mdio_read(
     if (ncpHwioTraceFunc != NULL) {
         ncp_hwio_rw_t rw;
         ncp_uint32_t devNum;
-                
+
         NCP_CALL(ncp_dev_num_get(devHdl, &devNum));
-                
+
         rw.regionId = regionId;
         rw.offset = offset;
         rw.buffer = buffer;
@@ -1948,7 +1987,7 @@ ncp_mdio_read(
         rw.count = count;
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
-                0, 
+                0,
                 devNum,
                 &rw);
     }
@@ -1964,7 +2003,7 @@ ncp_mdio_read(
 
 NCP_RETURN_LABEL
     return ncpStatus;
-}               
+}
 
 
 
@@ -1993,6 +2032,21 @@ ncp_hdl_transaction_start(
               );
 #endif
 
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_generic(
+		NCP_HWIO_TRANS_START,
+		0,
+		0
+		);
+#else
+    tracepoint(kubus,
+		netboot_generic,
+		NCP_HWIO_TRANS_START,
+		0,
+		0
+		);
+#endif
+
     if (ncpHwioTraceFunc != NULL) {
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
@@ -2139,6 +2193,21 @@ ncp_hdl_transaction_end(
               );
 #endif
 
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_generic(
+		NCP_HWIO_TRANS_END,
+		0,
+		0
+		);
+#else
+    tracepoint(kubus,
+		netboot_generic,
+		NCP_HWIO_TRANS_END,
+		0,
+		0
+		);
+#endif
+
     if (ncpHwioTraceFunc != NULL) {
         ncpHwioTraceFunc(
                 ncpHwioTraceFuncArg,
diff --git a/rte/api/common/ncp_utils_io.c b/rte/api/common/ncp_utils_io.c
index a3fa48f..b20ac1e 100644
--- a/rte/api/common/ncp_utils_io.c
+++ b/rte/api/common/ncp_utils_io.c
@@ -1,4 +1,5 @@
 /**************************************************************************
+ *
  **                                                                       *
  **    Copyright (c) 2001-2015, Intel Corporation.              *
  **                                                                       *
@@ -18,6 +19,16 @@
 #include "ncp_dev_pvt.h"
 #endif
 
+#if defined(__KERNEL__)
+//#define CREATE_TRACE_POINTS -> this is to be defined only once
+#define TRACE_HEADER_MULTI_READ
+#include "netboot-trace.h"  
+#else 
+//#define TRACEPOINT_DEFINE
+#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#include "netboot-tp.h"
+#endif
+
 /*
  * ncp_device_info_get
  * Description: Retrieve descriptive attributes about the NCP device.
@@ -79,6 +90,29 @@ ncp_poll(
     ncp_uint32_t    i;
     ncp_uint32_t    busAdaptor;
 
+#if !defined(__KERNEL__)
+	tracepoint(kubus, 
+		netboot_poll,
+		NCP_HWIO_POLL,        
+		9,               
+		regionId,             
+		offset,               
+		delayLoops,           
+		delayTime,            
+		mask,                 
+		value);               
+#else 
+	trace_netboot_kernel_poll(
+		NCP_HWIO_POLL,
+		9,
+		regionId,
+		offset,
+		delayLoops,
+		delayTime,
+		mask,
+		value);
+#endif
+
     if (ncpHwioTraceFunc != NULL) {
         ncp_uint32_t devNum;
         ncp_hwio_poll_t poll;
diff --git a/rte/api/common/netboot-tp.h b/rte/api/common/netboot-tp.h
new file mode 100644
index 0000000..1652d75
--- /dev/null
+++ b/rte/api/common/netboot-tp.h
@@ -0,0 +1,245 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER kubus
+
+#undef TRACEPOINT_INCLUDE
+#define TRACEPOINT_INCLUDE "./netboot-tp.h"
+
+#if !defined(_NETBOOT_TP_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _NETBOOT_TP_H
+
+#include <lttng/tracepoint.h>
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_rw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned char *, buffer,
+            size_t, bufferLen,
+            unsigned, count,
+            unsigned, xferWidth,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned char, buffer, buffer, size_t, bufferLen)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, xferWidth, xferWidth)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_poll,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned, delayLoops,
+            unsigned, delayTime,
+            unsigned, mask,
+            unsigned, value
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_integer(unsigned, delayLoops, delayLoops)
+        ctf_integer(unsigned, delayTime, delayTime)
+        ctf_integer(unsigned, mask, mask)
+        ctf_integer(unsigned, value, value)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_comment,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            const char*, comment
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_string(comment, comment)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_generic,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned long long, hwioArg
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned long long, hwioArg, hwioArg)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_fill,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned *, buffer,
+            unsigned, bufferLen,
+            unsigned, width,
+            unsigned, count,
+            unsigned, stride,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, width, width)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, stride, stride)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_rmw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            long long unsigned, offset,
+            long long unsigned*, buffer,
+            unsigned, bufferLen,
+            unsigned, count,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(long long unsigned, offset, offset)
+        ctf_sequence(long long unsigned, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_sw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long *, buffer,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_sequence(unsigned long long, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_bbw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned long long *, buffer,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, nvector,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned long long, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, nvector, nvector)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_bsw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned *, addrBuf,
+            unsigned long long *, dataBuf,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, nvector,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_sequence(unsigned, addrBuf, addrBuf, unsigned, bufferLen)
+        ctf_sequence(unsigned long long, dataBuf, dataBuf, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, nvector, nvector)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+#endif /* _NETBOOT_TP_H */
+
+#include <lttng/tracepoint-event.h>
diff --git a/rte/api/common/netboot-trace.h b/rte/api/common/netboot-trace.h
new file mode 100644
index 0000000..0eadc4f
--- /dev/null
+++ b/rte/api/common/netboot-trace.h
@@ -0,0 +1,350 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM netboot
+
+#if !defined(_NETBOOT_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _NETBOOT_TRACE_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(
+    netboot_kernel_rw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned char *buffer,
+        size_t bufferLen,
+        unsigned count,
+        unsigned xferWidth,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, count, xferWidth, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned char, buffer, bufferLen)
+        __field(unsigned, count)
+        __field(unsigned, xferWidth)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen);
+        __entry->count = count;
+        __entry->xferWidth = xferWidth;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_poll,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned delayLoops,
+        unsigned delayTime,
+        unsigned mask,
+        unsigned value
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, delayLoops, delayTime, mask, value),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __field(unsigned, delayLoops)
+        __field(unsigned, delayTime)
+        __field(unsigned, mask)
+        __field(unsigned, value)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        __entry->delayLoops = delayLoops;
+        __entry->delayTime = delayTime;
+        __entry->mask = mask;
+        __entry->value = value;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_comment,
+
+    TP_PROTO(
+        unsigned hwioType,
+        const char* comment
+    ),
+
+    TP_ARGS(hwioType, comment),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __string(comment, comment)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __assign_str(comment, comment);
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_generic,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned long long hwioArg
+    ),
+
+    TP_ARGS(hwioType, devNum, hwioArg),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned long long, hwioArg)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->hwioArg = hwioArg;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_fill,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned *buffer,
+        unsigned bufferLen,
+        unsigned width,
+        unsigned count,
+        unsigned stride,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, width, count, stride, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned, buffer, bufferLen)
+        __field(unsigned, width)
+        __field(unsigned, count)
+        __field(unsigned, stride)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned));
+        __entry->width = width;
+        __entry->count = count;
+        __entry->stride = stride;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_rmw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned count,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, count, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, count)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->count = count;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_sw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, buffer, bufferLen, length, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_bbw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned nvector,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, length, nvector, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, nvector)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->nvector = nvector;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_bsw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned *addrBuf,
+        unsigned long long *dataBuf,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned nvector,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, addrBuf, dataBuf, bufferLen, length, nvector, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __dynamic_array(unsigned, addrBuf, bufferLen)
+        __dynamic_array(unsigned long long, dataBuf, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, nvector)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        memcpy(__get_dynamic_array(addrBuf), addrBuf, bufferLen * sizeof(unsigned));
+        memcpy(__get_dynamic_array(dataBuf), dataBuf, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->nvector = nvector;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+#endif /* _NETBOOT_TRACE_H */
+
+/* This part must be outside protection */
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE netboot-trace
+#include <trace/define_trace.h>
diff --git a/rte/api/ncav3/task/ncp_task_pvt.h b/rte/api/ncav3/task/ncp_task_pvt.h
index a74ceb4..b82d432 100644
--- a/rte/api/ncav3/task/ncp_task_pvt.h
+++ b/rte/api/ncav3/task/ncp_task_pvt.h
@@ -1611,23 +1611,7 @@ ncp_task_fill_per_opcq_aux_data(_pvtTqsHdl,             \
 
 #define NCP_DEV_NCA_WRITE_INDIRECT_REG32(_dev, _region, _offset, _pVal)   \
 {                                                                         \
-    if (ncpHwioTraceFunc != NULL)                                         \
-    {                                                                     \
-        ncp_hwio_rw_t _hw;                                                \
-        ncp_uint32_t _devNum;                                             \
-        NCP_CALL(ncp_dev_num_get(_dev, &_devNum));                        \
-        _hw.regionId = _region;                                           \
-        _hw.offset = (_offset);                                           \
-        _hw.buffer = (ncp_uint32_t*)_pVal;                                \
-        _hw.count = 1;                                                    \
-        _hw.flags = 0;                                                    \
-        ncpHwioTraceFunc(                                                 \
-                ncpHwioTraceFuncArg,                                      \
-                NCP_HWIO_WRITE32,                                         \
-                _devNum,                                                  \
-                &_hw);                                                    \
-    }                                                                     \
-    NCP_CALL(ncp_dev_block_write32(_dev, _region, _offset, _pVal, 1, 0)); \
+	NCP_CALL(ncp_block_write32(_dev, _region, _offset, _pVal, 1, 0)); \
 }
 
 #define NCP_DEV_NCA_WRITE_REG32(_dev, _region, _offset, _val)             \
@@ -1641,25 +1625,10 @@ ncp_task_fill_per_opcq_aux_data(_pvtTqsHdl,             \
 
 #define NCP_DEV_NCA_READ_REG32(_dev, _region, _offset, _pVal)            \
 {                                                                        \
-    NCP_CALL(ncp_dev_block_read32(_dev, _region, _offset, _pVal, 1, 0)); \
-    if (ncpHwioTraceFunc != NULL)                                        \
-    {                                                                    \
-        ncp_hwio_rw_t _hw;                                               \
-        ncp_uint32_t _devNum;                                            \
-        NCP_CALL(ncp_dev_num_get(_dev, &_devNum));                       \
-        _hw.regionId = _region;                                          \
-        _hw.offset = (_offset);                                          \
-        _hw.buffer = (ncp_uint32_t*)_pVal;                               \
-        _hw.count = 1;                                                   \
-        _hw.flags = 0;                                                   \
-        ncpHwioTraceFunc(                                                \
-                ncpHwioTraceFuncArg,                                     \
-                NCP_HWIO_READ32,                                         \
-                _devNum,                                                 \
-                &_hw);                                                   \
-    }                                                                    \
+	NCP_CALL(ncp_block_read32(_dev, _region, _offset, _pVal, 1, 0)); \
 }
 
+
 #define NCP_TASK_POST_SEND_DONE(_pvtTqsHdl, _p_oPCQ)                      \
 {                                                                         \
     int _txQueueId = _p_oPCQ->u.opcq_info.relId;                          \
diff --git a/rte/api/ncp/ncp_dev.c b/rte/api/ncp/ncp_dev.c
index 71c8cb4..a48e556 100644
--- a/rte/api/ncp/ncp_dev.c
+++ b/rte/api/ncp/ncp_dev.c
@@ -88,6 +88,17 @@
 
 #include <ncp_sal_barrier.h>
 
+
+#if defined(NCP_KERNEL)
+#define CREATE_TRACE_POINTS // this is defined only once
+//#define TRACE_HEADER_MULTI_READ -> if CREATE_TRACE_POINTS than no ...READ
+#include "netboot-trace.h"
+#else
+//#define TRACEPOINT_DEFINE
+#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
+#include "netboot-tp.h"
+#endif
+
 /**************************************************************************
 * Local Defines
 ***************************************************************************/
@@ -10911,8 +10922,35 @@ ncp_dev_block_read8(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_READ8,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint8_t),
+			count,
+			0,
+			flags
+		);
+#else 
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_READ8,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint8_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_read8_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_read8 entry\n");
 
     /* Validate handle */
     NCP_CALL( ncp_dev_handle_check(dev));
@@ -10976,8 +11014,35 @@ ncp_dev_block_read16(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_READ16,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint16_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_READ16,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint16_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_read16_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_read16 entry\n");
 
     /* Validate handle */
     NCP_CALL( ncp_dev_handle_check(dev));
@@ -11041,7 +11106,35 @@ ncp_dev_block_read32(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_dev_func_call2, NCP_MSG_CALL, "%s entry; flags = %"PRIx64"\n", __func__, (ncp_uint64_t)(flags));
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_READ32,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint32_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_READ32,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint32_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_read32_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_read32 entry; flags = %x\n", flags);
 
     /* Validate handle */
     NCP_CALL( ncp_dev_handle_check(dev));
@@ -11103,8 +11196,35 @@ ncp_dev_block_read64(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_READ64,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint64_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_READ64,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint64_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_read64_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_read64 entry\n");
 
     /* Validate handle */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11165,8 +11285,35 @@ ncp_dev_block_write8(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_WRITE8,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint8_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_WRITE8,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint8_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_write8_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_write8 entry\n");
 
     /* Validate handle */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11230,8 +11377,35 @@ ncp_dev_block_write16(
     ncp_region_io_t  thisRegion;
     ncp_region_io_t *region = &thisRegion;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_WRITE16,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint16_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_WRITE16,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint16_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_write16_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_write16 entry\n");
 
     /* Validate handle */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11296,8 +11470,35 @@ ncp_dev_block_write32(
     ncp_region_io_t *region = &thisRegion;
     ncp_dev_trans_block_write32_t trans;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_WRITE32,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint32_t),
+			count,
+			0,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_WRITE32,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint32_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_write32_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_write32 entry\n");
 
     /* Validate handle */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11382,8 +11583,35 @@ ncp_dev_block_write64(
     ncp_region_io_t *region = &thisRegion;
 /*    ncp_dev_trans_block_write32_t trans; */
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rw(
+			NCP_HWIO_WRITE64,
+			0,
+			regionId,
+			offset,
+			(ncp_uint8_t *) buffer,
+			count * sizeof(ncp_uint64_t),
+			count,
+			0,
+			flags
+		);
+#else 
+    tracepoint(kubus,
+        netboot_rw,
+		NCP_HWIO_WRITE64,
+		0,
+		regionId,
+		offset,
+		(ncp_uint8_t *) buffer,
+		count * sizeof(ncp_uint64_t),
+		count,
+		0,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_write64_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_write64 entry\n");
 
     /* Validate handle */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11471,8 +11699,37 @@ ncp_dev_block_fill(
     ncp_uint32_t fillCount;
     ncp_uint32_t chunkCount;
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_fill(
+			NCP_HWIO_CRBF,
+			0,
+			regionId,
+			offset,
+			ncp_fill_p->NCP_POINTER(value),
+			ncp_fill_p->u.width, /* bufferLen */
+			ncp_fill_p->u.width,
+			ncp_fill_p->count,
+			ncp_fill_p->stride,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_fill,
+		NCP_HWIO_CRBF,
+		0,
+		regionId,
+		offset,
+		ncp_fill_p->NCP_POINTER(value),
+		ncp_fill_p->u.width, /* bufferLen */
+		ncp_fill_p->u.width,
+		ncp_fill_p->count,
+		ncp_fill_p->stride,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_block_fill_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_block_fill entry\n");
 
     /* Parameter validation */
     NCP_CALL(ncp_dev_handle_check(dev));
@@ -11582,8 +11839,33 @@ ncp_dev_read_modify_write(
     ncp_uint16_t     nodeId;
 
 
-    NCP_TRACEPOINT (Intel_AXXIA_ncp_dev, ncp_dev_func_call1, NCP_MSG_CALL,
-            "%s entry\n", __func__);
+#if defined(NCP_KERNEL)
+    trace_netboot_kernel_rmw(
+			NCP_HWIO_CRRMW,
+			0,
+			regionId,
+			offset,
+			(ncp_uint64_t *)(ncp_rmw_p->NCP_POINTER(rmw_buffer)),
+			ncp_rmw_p->count, /* bufferLen */
+			ncp_rmw_p->count,
+			flags
+		);
+#else
+    tracepoint(kubus,
+        netboot_rmw,
+		NCP_HWIO_CRRMW,
+		0,
+		regionId,
+		offset,
+		(long long unsigned*)(ncp_uint64_t *)(ncp_rmw_p->NCP_POINTER(rmw_buffer)),
+		ncp_rmw_p->count, /* bufferLen */
+		ncp_rmw_p->count,
+		flags
+		);
+#endif
+
+    NCP_TRACEPOINT(Intel_AXXIA_ncp_dev, ncp_xlf_dev_read_modify_write_entry,
+                   NCP_MSG_ENTRY, "ncp_dev_read_modify_write entry\n");
 
     /* Parameter validation */
     NCP_CALL(ncp_dev_handle_check(dev));
diff --git a/rte/api/ncp/netboot-tp.h b/rte/api/ncp/netboot-tp.h
new file mode 100644
index 0000000..1652d75
--- /dev/null
+++ b/rte/api/ncp/netboot-tp.h
@@ -0,0 +1,245 @@
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER kubus
+
+#undef TRACEPOINT_INCLUDE
+#define TRACEPOINT_INCLUDE "./netboot-tp.h"
+
+#if !defined(_NETBOOT_TP_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _NETBOOT_TP_H
+
+#include <lttng/tracepoint.h>
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_rw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned char *, buffer,
+            size_t, bufferLen,
+            unsigned, count,
+            unsigned, xferWidth,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned char, buffer, buffer, size_t, bufferLen)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, xferWidth, xferWidth)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_poll,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned, delayLoops,
+            unsigned, delayTime,
+            unsigned, mask,
+            unsigned, value
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_integer(unsigned, delayLoops, delayLoops)
+        ctf_integer(unsigned, delayTime, delayTime)
+        ctf_integer(unsigned, mask, mask)
+        ctf_integer(unsigned, value, value)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_comment,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            const char*, comment
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_string(comment, comment)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_generic,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned long long, hwioArg
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned long long, hwioArg, hwioArg)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_fill,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned *, buffer,
+            unsigned, bufferLen,
+            unsigned, width,
+            unsigned, count,
+            unsigned, stride,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, width, width)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, stride, stride)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_rmw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            long long unsigned, offset,
+            long long unsigned*, buffer,
+            unsigned, bufferLen,
+            unsigned, count,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(long long unsigned, offset, offset)
+        ctf_sequence(long long unsigned, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, count, count)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_sw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long *, buffer,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_sequence(unsigned long long, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_bbw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned long long, offset,
+            unsigned long long *, buffer,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, nvector,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_integer(unsigned long long, offset, offset)
+        ctf_sequence(unsigned long long, buffer, buffer, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, nvector, nvector)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+
+TRACEPOINT_EVENT(
+    kubus,
+
+    netboot_bsw,
+
+    TP_ARGS(
+            unsigned, hwioType,
+            unsigned, devNum,
+            unsigned, regionId,
+            unsigned *, addrBuf,
+            unsigned long long *, dataBuf,
+            unsigned, bufferLen,
+            unsigned, length,
+            unsigned, nvector,
+            unsigned, flags
+    ),
+
+    TP_FIELDS(
+        ctf_integer(unsigned, hwioType, hwioType)
+        ctf_integer(unsigned, devNum, devNum)
+        ctf_integer(unsigned, regionId, regionId)
+        ctf_sequence(unsigned, addrBuf, addrBuf, unsigned, bufferLen)
+        ctf_sequence(unsigned long long, dataBuf, dataBuf, unsigned, bufferLen)
+        ctf_integer(unsigned, length, length)
+        ctf_integer(unsigned, nvector, nvector)
+        ctf_integer(unsigned, flags, flags)
+    )
+)
+#endif /* _NETBOOT_TP_H */
+
+#include <lttng/tracepoint-event.h>
diff --git a/rte/api/ncp/netboot-trace.h b/rte/api/ncp/netboot-trace.h
new file mode 100644
index 0000000..0eadc4f
--- /dev/null
+++ b/rte/api/ncp/netboot-trace.h
@@ -0,0 +1,350 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM netboot
+
+#if !defined(_NETBOOT_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _NETBOOT_TRACE_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(
+    netboot_kernel_rw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned char *buffer,
+        size_t bufferLen,
+        unsigned count,
+        unsigned xferWidth,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, count, xferWidth, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned char, buffer, bufferLen)
+        __field(unsigned, count)
+        __field(unsigned, xferWidth)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen);
+        __entry->count = count;
+        __entry->xferWidth = xferWidth;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_poll,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned delayLoops,
+        unsigned delayTime,
+        unsigned mask,
+        unsigned value
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, delayLoops, delayTime, mask, value),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __field(unsigned, delayLoops)
+        __field(unsigned, delayTime)
+        __field(unsigned, mask)
+        __field(unsigned, value)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        __entry->delayLoops = delayLoops;
+        __entry->delayTime = delayTime;
+        __entry->mask = mask;
+        __entry->value = value;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_comment,
+
+    TP_PROTO(
+        unsigned hwioType,
+        const char* comment
+    ),
+
+    TP_ARGS(hwioType, comment),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __string(comment, comment)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __assign_str(comment, comment);
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_generic,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned long long hwioArg
+    ),
+
+    TP_ARGS(hwioType, devNum, hwioArg),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned long long, hwioArg)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->hwioArg = hwioArg;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_fill,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned *buffer,
+        unsigned bufferLen,
+        unsigned width,
+        unsigned count,
+        unsigned stride,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, width, count, stride, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned, buffer, bufferLen)
+        __field(unsigned, width)
+        __field(unsigned, count)
+        __field(unsigned, stride)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned));
+        __entry->width = width;
+        __entry->count = count;
+        __entry->stride = stride;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_rmw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned count,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, count, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, count)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->count = count;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_sw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, buffer, bufferLen, length, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_bbw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned long long offset,
+        unsigned long long *buffer,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned nvector,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, offset, buffer, bufferLen, length, nvector, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __field(unsigned long long, offset)
+        __dynamic_array(unsigned long long, buffer, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, nvector)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        __entry->offset = offset;
+        memcpy(__get_dynamic_array(buffer), buffer, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->nvector = nvector;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+
+TRACE_EVENT(
+    netboot_kernel_bsw,
+
+    TP_PROTO(
+        unsigned hwioType,
+        unsigned devNum,
+        unsigned regionId,
+        unsigned *addrBuf,
+        unsigned long long *dataBuf,
+        unsigned bufferLen,
+        unsigned length,
+        unsigned nvector,
+        unsigned flags
+    ),
+
+    TP_ARGS(hwioType, devNum, regionId, addrBuf, dataBuf, bufferLen, length, nvector, flags),
+
+    TP_STRUCT__entry(
+        __field(unsigned, hwioType)
+        __field(unsigned, devNum)
+        __field(unsigned, regionId)
+        __dynamic_array(unsigned, addrBuf, bufferLen)
+        __dynamic_array(unsigned long long, dataBuf, bufferLen)
+        __field(unsigned, length)
+        __field(unsigned, nvector)
+        __field(unsigned, flags)
+    ),
+
+    TP_fast_assign(
+        __entry->hwioType = hwioType;
+        __entry->devNum = devNum;
+        __entry->regionId = regionId;
+        memcpy(__get_dynamic_array(addrBuf), addrBuf, bufferLen * sizeof(unsigned));
+        memcpy(__get_dynamic_array(dataBuf), dataBuf, bufferLen * sizeof(unsigned long long));
+        __entry->length = length;
+        __entry->nvector = nvector;
+        __entry->flags = flags;
+    ),
+
+    TP_printk("%d", 0)
+);
+#endif /* _NETBOOT_TRACE_H */
+
+/* This part must be outside protection */
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE netboot-trace
+#include <trace/define_trace.h>
-- 
2.10.0.177.ge510a86

