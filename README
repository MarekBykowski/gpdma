NetBoot trace generation. Any comments can be addressed at marekx.bykowski@intel.com

===================================================

This facility offers a NetBoot trace production through "external lttng" in contrast to 
LTTng "built in" RTE. The process can be broken down to 2x parts:
1. Collection of the traces from RTE in the board
2. Parsing, production and incorporation of the traces into Uboot

Go with:
1. Get a working copy of /workspace/sw/mbykowsx/lionfish/netboot_lttng
2. Clone and checkout out a kernel (against which LTTNg modules and RTE will be built against)
3. Patch RTE

Wat 'netboot_lttng' is?
'netboot_lttng' is a LTTng kernel modules 2.10 patched to provide the LTTng adaptation
layer to kernel module RTE so that the trace calls in RTE can be exposed and callected by
the user space LTTng daemon. It also includes the NetBoot traces for the user space and
the scripts for trace production as well as trace conversion to Uboot ones ready to be
deployed in Uboot.

===================================================

1. Collection of the traces

Check out a kernel to build RTE and lttng aginst. Go to netboot_lttng directory and
set KERNELDIR in the topmost Makefile to the directory the kernel is.

Run make:
# make

Patch RTE with NetBoot patches:
# git apply 0001-netboot-traces-Core-ncp-rte-changes-for-the-netboot-.patch
# git apply 0002-netboot-traces-Adding-the-trace-calls-for-user-and-k.patch

With the second patch you may run into conflicts. It's easy to resolve them which
should get you ended up in having all the tracepoints from the patch applied to RTE.

Go to the board and run script "collect.sh" to collect the traces:
# ./scripts/collect.sh

'collect.sh' expects in '$1' a directory in which the RTE built is.

After the trace generation copy the traces (which you should be able to find in/root/lttng-trace)
to your working directory with 'babeltrace' present (eg. you can install it
with 'sudo apt-get install babeltrace' on Ubuntu).

===================================================

2. Incorporation of the traces to Uboot

Copy the scripts (from ./scripts) to the directory with the traces (eg. auto-20180302-043143):
convert.py
generate.sh
parse_netboot.py
kernel_traces_netboot.py
VA2PA.patch

Run "generate.sh" to produce the Uboot traces.
# ./generate.sh

It should get you produced Uboot traces in 'all.c'. Copy it to Uboot at 
'./board/axxia/axc6700/ncatask/EIOA67xx/'

What 'generate.sh' does under the hood is:
- babeltraces the LTTng traces and converts them to "old good" HW traces (old ncpCfgTool
with -n flag was able to produce)
- supresses the duplicates of the traces if it happenes the same traces were captured in user
and kernel space
- converts the "old good" HW traces to Uboot traces
- applies the convertion of the Virtual to Physical addresses (details below)
- and as a final step it writes all to "all.c"

To quickly test the traces in Uboot stop it in the prompt and run:
"setenv gmacport gmac48; setenv ethact LSI_EIOA; dhcp"

Details on address translation: NetBoot uses SharedMemoryPool(2), and blocks within:
64K | 16K | 2K | 256B. Each of the blocks is layed down in the main memory and is used to
accomodate the EIOA packets. The addresses of the blocks the RTE writes to the registers
are Virtual ones. While kernel has the ability to translate these to the Physical ones
Uboot doesn't so what we do we translate the Virtual to Physical addresses for Uboot before 
Uboot gets to loading the traces which is before providing the final 'all.c'.
NOTE: these memory block addresses are in config.xml present ONLY after applying 
"Validate Configuration" and saving to the xml file in ASE. After each ASE release you should
always check VA2PA.patch against the xml and change the addresses recpectively. 
TODO???: If you want me to automate this step please let me know.
